b0                   ::  in - {}                                                                                          //   out - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1), not_finished->(True, True)}
for.cond             ::  in - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, True)}   //   out - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, True)}
for.body             ::  in - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, True)}   //   out - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, True)}
if.true              ::  in - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, True)}   //   out - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, False)}
if.false             ::  in - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, True)}   //   out - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(2, 1000), not_finished->(False, True)}
for.end              ::  in - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, True)}   //   out - {ten->(10, 10), zero->(0, 0), one->(1, 1), index->(1, 1000), not_finished->(False, True), exp->(0, 999)}
b5                   ::  in - {}                                                                                          //   out - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(True, True)}
for.cond.pow         ::  in - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}                       //   out - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}
for.body.pow         ::  in - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}                       //   out - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}
if.true.pow          ::  in - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}                       //   out - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, False)}
if.false.pow         ::  in - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}                       //   out - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}
for.end.pow          ::  in - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}                       //   out - {res->(1, 1), zero->(0, 0), one->(1, 1), not_finished->(False, True)}
b11                  ::  in - {}                                                                                          //   out - {is_palindrome->(False, False), zero->(0, 0), two->(2, 2), ten->(10, 10)}
if.true.palindrome   ::  in - {is_palindrome->(False, False), zero->(0, 0), two->(2, 2), ten->(10, 10)}                   //   out - {is_palindrome->(True, True), zero->(0, 0), two->(2, 2), ten->(10, 10)}
if.false.palindrome  ::  in - {is_palindrome->(False, False), zero->(0, 0), two->(2, 2), ten->(10, 10)}                   //   out - {is_palindrome->(False, False), zero->(0, 0), two->(2, 2), ten->(10, 10)}
if.true.mirror       ::  in - {is_palindrome->(False, False), zero->(0, 0), two->(2, 2), ten->(10, 10)}                   //   out - {is_palindrome->(False, False), zero->(0, 0), two->(2, 2), ten->(10, 10)}
if.false.mirror      ::  in - {is_palindrome->(False, False), zero->(0, 0), two->(2, 2), ten->(10, 10)}                   //   out - {is_palindrome->(False, False), zero->(0, 0), two->(2, 2), ten->(10, 10)}
if.end.palindrome    ::  in - {is_palindrome->(False, True), zero->(0, 0), two->(2, 2), ten->(10, 10)}                    //   out - {is_palindrome->(False, True), zero->(0, 0), two->(2, 2), ten->(10, 10)}
